---
title: "Assignment 1: Census Data Quality for Policy Decisions"
subtitle: "Evaluating Data Reliability for Algorithmic Decision-Making"
author: "Nina Carlsen"
date: today
format:
  html:
    theme: cosmo
    toc: true
    toc-location: left
    code-fold: false
execute:
  warning: false
  message: false
---

## Executive Summary

New Jersey’s ACS income and demographic data reveal a consistent pattern of uneven data quality. County-level analysis shows a spectrum of reliability—some counties meet high-confidence thresholds (MOE \< 5%), while others fall into moderate or low confidence (\>5% and \>10%, respectively). At the tract level, high MOE flags are concentrated in smaller, less populous tracts and in certain counties, indicating that measurement error is structured rather than random.

These reliability gaps heighten equity concerns. Communities with high MOE—often smaller tracts with higher proportions of racial or ethnic minorities—face greater risk of algorithmic bias because automated tools would rely on less stable estimates. In practice, this could mean under- or over-allocation of services, reinforcing disadvantage in places already experiencing demographic complexity or economic precarity.

Underlying these issues are small sample sizes, population volatility, and the statistical design of the ACS. Tracts with lower population and more heterogeneous housing or migration patterns yield larger sampling errors. Indicator choice (e.g., median income) also amplifies uncertainty where incomes are dispersed, creating persistent structural risk in precisely those communities where accurate targeting matters most.

To address these vulnerabilities, the Department should implement MOE-aware standards: require minimum reliability thresholds for algorithmic inputs, weight or smooth high-MOE measures, and mandate human review where confidence is low. Pair these safeguards with investments in improved data—multi-year pooling, administrative records, or targeted oversampling—and publish transparency dashboards so decision-makers and residents can see where algorithmic decisions are strong, where caution is warranted, and where alternative approaches are needed.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
library(tidyverse)
library(tidycensus)
library(knitr)
library(stringr)

census_api_key(Sys.getenv("e195d3b46a99d2c4f9250dbc870202be7aaf8a2b"), install = FALSE, overwrite = FALSE)

my_state <- "NJ"
my_year  <- 2022

nj_data <- get_acs(
  geography = "county",
  variables = c(total_pop = "B01003_001", median_income = "B19013_001"),
  state = my_state,
  year = my_year,
  output = "wide"
)

nj_reliability <- nj_data %>%
  mutate(
    county_name = NAME %>% str_remove(", New Jersey") %>% str_remove(" County"),
    moe_percentage = 100 * median_incomeM / median_incomeE,
    reliability = case_when(
      moe_percentage < 5 ~ "High Confidence",
      moe_percentage <= 10 ~ "Moderate",
      moe_percentage > 10 ~ "Low Confidence"
    )
  )

top5 <- nj_reliability %>%
  mutate(moe_pct = 100 * median_incomeM / median_incomeE) %>%
  arrange(desc(moe_pct)) %>%
  slice_head(n = 5) %>%
  transmute(
    county_name,
    median_income = median_incomeE,
    margin_of_error = median_incomeM,
    `MOE %` = sprintf("%.2f%%", moe_pct),
    `Reliability Category` = reliability
  )

knitr::kable(top5,
  caption = "Top 5 NJ Counties with Highest MOE Percentage",
  col.names = c("County", "Median Income", "Margin of Error", "MOE %", "Reliability Category"),
  format.args = list(big.mark = ",")
)

selected_counties <- nj_reliability %>%
  filter(county_name %in% c("Somerset", "Essex", "Middlesex")) %>%
  mutate(moe_pct = 100 * median_incomeM / median_incomeE) %>%
  transmute(
    county_name,
    median_income = median_incomeE,
    `MOE %` = sprintf("%.2f%%", moe_pct),
    `Reliability Category` = reliability
  )

knitr::kable(selected_counties,
  caption = "Selected Counties for Tract-Level Study",
  col.names = c("County", "Median Income", "MOE %", "Reliability Category"),
  format.args = list(big.mark = ",")
)

race_vars <- c(
  total = "B03002_001",
  white = "B03002_003",
  black = "B03002_004",
  hispanic = "B03002_012"
)

tract_demo <- get_acs(
  geography = "tract",
  state = my_state,
  county = c("035", "013", "023"),
  year = my_year,
  variables = race_vars,
  output = "wide"
)

nj_counties <- tidycensus::fips_codes %>%
  filter(state_code == "34") %>%
  distinct(county_code, county) %>%
  rename(county_name = county)

tract_demo <- tract_demo %>%
  mutate(county_code = substr(GEOID, 3, 5)) %>%
  left_join(nj_counties, by = "county_code") %>%
  select(-county_code) %>%
  mutate(
    pct_white = if_else(totalE > 0, 100 * whiteE / totalE, NA_real_),
    pct_black = if_else(totalE > 0, 100 * blackE / totalE, NA_real_),
    pct_hispanic = if_else(totalE > 0, 100 * hispanicE / totalE, NA_real_)
  )

top_hispanic_tract <- tract_demo %>%
  filter(!is.na(pct_hispanic)) %>%
  arrange(desc(pct_hispanic)) %>%
  slice_head(n = 1) %>%
  transmute(
    Tract = NAME,
    County = county_name,
    `Hispanic %` = sprintf("%.2f%%", pct_hispanic)
  )

knitr::kable(top_hispanic_tract,
  caption = "Tract with Highest Percent Hispanic/Latino (Selected NJ Counties)"
)

county_avgs <- tract_demo %>%
  group_by(county_name) %>%
  summarise(
    n_tracts = n(),
    avg_white = mean(pct_white, na.rm = TRUE),
    avg_black = mean(pct_black, na.rm = TRUE),
    avg_hispanic = mean(pct_hispanic, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(avg_hispanic)) %>%
  transmute(
    county_name, n_tracts,
    `Avg White %` = sprintf("%.2f%%", avg_white),
    `Avg Black %` = sprintf("%.2f%%", avg_black),
    `Avg Hispanic %` = sprintf("%.2f%%", avg_hispanic)
  )

knitr::kable(county_avgs,
  caption = "Average Tract Demographics by County (Simple Averages of Tract %s)",
  col.names = c("County", "# Tracts", "Avg White %", "Avg Black %", "Avg Hispanic %")
)

demographic_moe <- tract_demo %>%
  mutate(
    white_moe_pct = if_else(whiteE > 0, 100 * whiteM / whiteE, NA_real_),
    black_moe_pct = if_else(blackE > 0, 100 * blackM / blackE, NA_real_),
    hispanic_moe_pct = if_else(hispanicE > 0, 100 * hispanicM / hispanicE, NA_real_),
    any_high_moe = pmax(white_moe_pct, black_moe_pct, hispanic_moe_pct, na.rm = TRUE) > 15
  )

overall_moe_summary <- demographic_moe %>%
  summarise(
    total_tracts = n(),
    tracts_high_moe = sum(any_high_moe, na.rm = TRUE),
    pct_high_moe = 100 * tracts_high_moe / total_tracts,
    avg_white_moe = mean(white_moe_pct, na.rm = TRUE),
    avg_black_moe = mean(black_moe_pct, na.rm = TRUE),
    avg_hispanic_moe = mean(hispanic_moe_pct, na.rm = TRUE)
  )

knitr::kable(overall_moe_summary,
  caption = "Overall MOE Summary (Tract-Level)",
  col.names = c("Total Tracts", "Tracts with High MOE (>15%)", "% High MOE",
                "Avg White MOE %", "Avg Black MOE %", "Avg Hispanic MOE %")
)

by_county_moe_summary <- demographic_moe %>%
  group_by(county_name) %>%
  summarise(
    n_tracts = n(),
    tracts_high_moe = sum(any_high_moe, na.rm = TRUE),
    pct_high_moe = 100 * tracts_high_moe / n_tracts,
    avg_white_moe = mean(white_moe_pct, na.rm = TRUE),
    avg_black_moe = mean(black_moe_pct, na.rm = TRUE),
    avg_hispanic_moe = mean(hispanic_moe_pct, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(pct_high_moe))

knitr::kable(by_county_moe_summary,
  caption = "MOE Summary by County (Tract-Level)",
  col.names = c("County", "# Tracts", "# High MOE Tracts", "% High MOE",
                "Avg White MOE %", "Avg Black MOE %", "Avg Hispanic MOE %")
)

pattern_summary <- demographic_moe %>%
  group_by(any_high_moe) %>%
  summarise(
    n_tracts = n(),
    avg_population = mean(totalE, na.rm = TRUE),
    avg_white_pct = mean(pct_white, na.rm = TRUE),
    avg_black_pct = mean(pct_black, na.rm = TRUE),
    avg_hisp_pct = mean(pct_hispanic, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    `MOE Group` = if_else(any_high_moe, "High MOE (≥15% any group)", "Low MOE (<15%)")
  ) %>%
  select(`MOE Group`, n_tracts, avg_population, avg_white_pct, avg_black_pct, avg_hisp_pct)

knitr::kable(pattern_summary,
  caption = "Comparison of Tracts by Data Quality (High vs. Low MOE)",
  col.names = c("MOE Group", "Number of Tracts",
                "Avg Population", "Avg White %", "Avg Black %", "Avg Hispanic %"),
  format.args = list(big.mark = ",", digits = 2)
)

recommendations <- nj_reliability %>%
  mutate(
    moe_pct = 100 * median_incomeM / median_incomeE,
    reliability = case_when(
      is.finite(moe_pct) & moe_pct < 5   ~ "High Confidence",
      is.finite(moe_pct) & moe_pct < 10  ~ "Moderate Confidence",
      is.finite(moe_pct) & moe_pct >= 10 ~ "Low Confidence",
      TRUE ~ NA_character_
    ),
    recommendation = case_when(
      reliability == "High Confidence"      ~ "Safe for algorithmic decisions",
      reliability == "Moderate Confidence"  ~ "Use with caution - monitor outcomes",
      reliability == "Low Confidence"       ~ "Requires manual review or additional data",
      TRUE ~ "Review data"
    )
  ) %>%
  transmute(
    county = county_name,
    median_income = median_incomeE,
    `MOE %` = sprintf("%.2f%%", moe_pct),
    reliability,
    recommendation
  )

knitr::kable(
  recommendations,
  caption = "County Reliability & Algorithm Recommendations",
  col.names = c("County", "Median Income", "MOE %", "Reliability Category", "Recommendation"),
  format.args = list(big.mark = ",")
)

high_conf_counties <- recommendations %>% filter(reliability == "High Confidence") %>% pull(county)
moderate_conf_counties <- recommendations %>% filter(reliability == "Moderate Confidence") %>% pull(county)
low_conf_counties <- recommendations %>% filter(reliability == "Low Confidence") %>% pull(county)
```
